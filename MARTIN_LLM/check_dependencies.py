#!/usr/bin/env python3
"""
Script para verificar que todas las dependencias offline est√©n disponibles
"""
import sys
import importlib
from pathlib import Path

def check_module(module_name, description=""):
    """Verifica si un m√≥dulo est√° disponible"""
    try:
        importlib.import_module(module_name)
        print(f"‚úÖ {module_name} - {description}")
        return True
    except ImportError:
        print(f"‚ùå {module_name} - {description} - NO ENCONTRADO")
        return False

def check_file(file_path, description=""):
    """Verifica si un archivo existe"""
    if Path(file_path).exists():
        print(f"‚úÖ {file_path} - {description}")
        return True
    else:
        print(f"‚ùå {file_path} - {description} - NO ENCONTRADO")
        return False

def main():
    print("üîç Verificando dependencias para aplicaci√≥n offline...")
    print("=" * 60)
    
    all_ok = True
    
    # Dependencias cr√≠ticas para funcionamiento offline
    critical_modules = [
        ("llama_cpp", "Motor de inferencia local"),
        ("PySide6", "Interfaz gr√°fica"),
        ("sqlite3", "Base de datos local"),
        ("numpy", "Operaciones matem√°ticas"),
    ]
    
    print("\nüìã M√≥dulos cr√≠ticos:")
    for module, desc in critical_modules:
        if not check_module(module, desc):
            all_ok = False
    
    # Archivos cr√≠ticos
    critical_files = [
        ("run.py", "Archivo principal"),
        ("app/", "C√≥digo de aplicaci√≥n"),
        ("ui/", "Interfaz de usuario"),
        (".env", "Variables de entorno"),
    ]
    
    print("\nüìÅ Archivos cr√≠ticos:")
    for file_path, desc in critical_files:
        if not check_file(file_path, desc):
            all_ok = False
    
    # Verificar modelos locales
    print("\nü§ñ Modelos locales:")
    models_dir = Path("models")
    if models_dir.exists():
        gguf_files = list(models_dir.glob("*.gguf"))
        if gguf_files:
            print(f"‚úÖ Encontrados {len(gguf_files)} modelos .gguf")
            for model in gguf_files:
                print(f"   - {model.name}")
        else:
            print("‚ö†Ô∏è  No se encontraron modelos .gguf")
    else:
        print("‚ùå Carpeta models/ no existe")
        all_ok = False
    
    # Verificar llama_cpp espec√≠ficamente
    print("\nü¶ô Verificaci√≥n espec√≠fica de llama_cpp:")
    try:
        import llama_cpp
        llama_path = Path(llama_cpp.__file__).parent
        print(f"‚úÖ llama_cpp ubicado en: {llama_path}")
        
        # Verificar librer√≠as nativas
        lib_path = llama_path / "lib"
        if lib_path.exists():
            dll_files = list(lib_path.glob("*.dll")) + list(lib_path.glob("*.so"))
            print(f"‚úÖ Encontradas {len(dll_files)} librer√≠as nativas")
        else:
            print("‚ö†Ô∏è  Carpeta lib/ no encontrada en llama_cpp")
            
    except ImportError:
        print("‚ùå llama_cpp no est√° instalado")
        all_ok = False
    
    print("\n" + "=" * 60)
    if all_ok:
        print("üéâ ¬°Todo listo para construir la aplicaci√≥n offline!")
        print("üì¶ Ejecuta: python setup.py build")
    else:
        print("‚ö†Ô∏è  Hay dependencias faltantes. Inst√°lalas antes de continuar.")
        print("üì• Ejecuta: pip install llama-cpp-python PySide6 numpy")
    
    return all_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)