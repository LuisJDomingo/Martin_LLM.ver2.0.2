# -*- coding: utf-8 -*-
# smart_start.py - Inicio inteligente con detecci√≥n autom√°tica de hardware

import sys
import os
from pathlib import Path

# A√±adir la ra√≠z del proyecto al path
project_root = Path(__file__).parent.resolve()
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from hardware_detector import HardwareDetector

class SmartStart:
    """Sistema de inicio inteligente para MARTIN LLM."""
    
    def __init__(self):
        self.detector = HardwareDetector()
        self.config = None
        
    def initialize(self):
        """Inicializa el sistema con la configuraci√≥n apropiada."""
        print("üöÄ MARTIN LLM - Inicio Inteligente")
        print("="*50)
        
        # Verificar si ya existe configuraci√≥n
        saved_config = self.detector.load_saved_config()
        
        if saved_config:
            print(f"üìã Configuraci√≥n existente encontrada: {saved_config.get('description', 'N/A')}")
            
            # Ofrecer opciones: usar existente, reconfigurar, o usar GUI
            print("\nüîß Opciones:")
            print("   [1] Usar configuraci√≥n existente")
            print("   [2] Reconfigurar (terminal)")
            print("   [3] Configurador gr√°fico")
            
            choice = input("\nüëÜ Seleccione una opci√≥n (1/2/3): ").strip()
            
            if choice == '1':
                self.config = saved_config
                print("‚úÖ Usando configuraci√≥n existente.")
            elif choice == '3':
                self.config = self._launch_gui_config()
            else:
                self.config = self._get_new_config()
        else:
            print("üîß Primera ejecuci√≥n - Configurando sistema...")
            print("\nüé® ¬øC√≥mo desea configurar el sistema?")
            print("   [1] Configurador gr√°fico (recomendado)")
            print("   [2] Configurador de terminal")
            
            choice = input("\nüëÜ Seleccione una opci√≥n (1/2): ").strip()
            
            if choice == '1' or choice == '':
                self.config = self._launch_gui_config()
            else:
                self.config = self._get_new_config()
        
        return self.config
    
    def _get_new_config(self):
        """Obtiene nueva configuraci√≥n del usuario."""
        config = self.detector.get_user_choice()
        
        # Guardar configuraci√≥n
        save_config = input("\nüíæ ¬øGuardar esta configuraci√≥n? (S/n): ").strip().lower()
        if save_config not in ['n', 'no']:
            self.detector.save_config(config)
        
        return config
    
    def _launch_gui_config(self):
        """Lanza el configurador gr√°fico."""
        print("üé® Iniciando configurador gr√°fico...")
        
        try:
            from PyQt6.QtWidgets import QApplication
            from hardware_config_gui_v2 import HardwareConfigGUI
            from ui.qt_styles import apply_futuristic_theme
            import sys
            
            # Crear aplicaci√≥n Qt si no existe
            app = QApplication.instance()
            if app is None:
                app = QApplication(sys.argv)
                app.setStyle('Fusion')
                apply_futuristic_theme(app)
            
            # Crear y mostrar ventana de configuraci√≥n
            config_window = HardwareConfigGUI()
            config_window.show()
            
            # Ejecutar el di√°logo
            app.exec()
            
            # Cargar configuraci√≥n guardada
            saved_config = self.detector.load_saved_config()
            if saved_config:
                print("‚úÖ Configuraci√≥n guardada desde interfaz gr√°fica.")
                return saved_config
            else:
                print("‚ö†Ô∏è  No se guard√≥ configuraci√≥n. Usando configuraci√≥n por defecto.")
                return self._get_default_config()
                
        except ImportError as e:
            print(f"‚ùå Error: No se pudo cargar la interfaz gr√°fica: {e}")
            print(f"üîÑ Usando configurador de terminal...")
            return self._get_new_config()
        except Exception as e:
            print(f"‚ùå Error inesperado en interfaz gr√°fica: {e}")
            print(f"üîÑ Usando configurador de terminal...")
            return self._get_new_config()
    
    def _get_default_config(self):
        """Retorna configuraci√≥n por defecto."""
        return {
            'type': 'default_cpu',
            'n_gpu_layers': 0,
            'n_threads': os.cpu_count(),
            'requires_cuda_build': False,
            'description': 'Configuraci√≥n por defecto (CPU)'
        }
    
    def start_application(self):
        """Inicia la aplicaci√≥n principal con la configuraci√≥n seleccionada."""
        config = self.initialize()
        
        print(f"\nüéØ Iniciando MARTIN LLM con configuraci√≥n:")
        print(f"   ‚Ä¢ Tipo: {config.get('type', 'unknown')}")
        print(f"   ‚Ä¢ GPU Layers: {config.get('n_gpu_layers', 0)}")
        print(f"   ‚Ä¢ CPU Threads: {config.get('n_threads', 'auto')}")
        
        # Verificar si se requiere build CUDA
        if config.get('requires_cuda_build', False) and config.get('n_gpu_layers', 0) > 0:
            print(f"\n‚ö†Ô∏è  Esta configuraci√≥n requiere llama-cpp-python con soporte CUDA")
            self._check_cuda_availability()
        
        # Importar y ejecutar la aplicaci√≥n principal
        try:
            print(f"\nüöÄ Iniciando aplicaci√≥n principal...")
            
            # Establecer variables de entorno para la configuraci√≥n
            os.environ['MARTIN_GPU_LAYERS'] = str(config.get('n_gpu_layers', 0))
            os.environ['MARTIN_CPU_THREADS'] = str(config.get('n_threads', os.cpu_count()))
            os.environ['MARTIN_HARDWARE_TYPE'] = config.get('type', 'unknown')
            
            # Importar y ejecutar main_qt (interfaz principal)
            import main_qt
            main_qt.main()
            
        except ImportError as e:
            print(f"‚ùå Error importando la aplicaci√≥n principal: {e}")
            print(f"   Verificar que todos los archivos est√©n presentes.")
            return False
        except Exception as e:
            print(f"‚ùå Error iniciando la aplicaci√≥n: {e}")
            return False
        
        return True
    
    def _check_cuda_availability(self):
        """Verifica si CUDA est√° disponible y ofrece ayuda."""
        try:
            # Intentar importar llama_cpp y verificar capacidades
            from llama_cpp import Llama
            
            # Crear una instancia temporal con 1 capa GPU para probar
            test_model_path = "test"  # Solo para verificar importaci√≥n
            print("‚úÖ llama-cpp-python parece tener soporte GPU")
            
        except Exception as e:
            print(f"\n‚ùå Problema detectado con soporte GPU: {e}")
            print(f"\nüîß Para habilitar GPU, ejecute:")
            print(f"   pip uninstall llama-cpp-python")
            print(f"   pip install llama-cpp-python --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cu121")
            
            # Ofrecer continuar con CPU
            continue_cpu = input(f"\n¬øContinuar con solo CPU? (S/n): ").strip().lower()
            if continue_cpu in ['n', 'no']:
                print(f"üëã Saliendo... Instale soporte CUDA y vuelva a intentar.")
                sys.exit(0)
            else:
                # Cambiar configuraci√≥n a solo CPU
                self.config['n_gpu_layers'] = 0
                self.config['type'] = 'fallback_cpu'
                print(f"‚ö†Ô∏è  Cambiando a modo CPU √∫nicamente.")

def main():
    """Funci√≥n principal del inicio inteligente."""
    try:
        starter = SmartStart()
        success = starter.start_application()
        
        if not success:
            print(f"\n‚ùå La aplicaci√≥n no pudo iniciarse correctamente.")
            input(f"Presione Enter para salir...")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n\nüëã Inicio cancelado por el usuario.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico durante el inicio: {e}")
        import traceback
        traceback.print_exc()
        input(f"Presione Enter para salir...")
        sys.exit(1)

if __name__ == "__main__":
    main()